//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MyService", ConfigurationName="ServiceReference.IService", CallbackContract=typeof(Client.ServiceReference.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="MyService/IService/test", ReplyAction="MyService/IService/testResponse")]
        void test();
        
        [System.ServiceModel.OperationContractAttribute(Action="MyService/IService/test", ReplyAction="MyService/IService/testResponse")]
        System.Threading.Tasks.Task testAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="MyService/IService/test0", ReplyAction="MyService/IService/test0Response")]
        void test0();
        
        [System.ServiceModel.OperationContractAttribute(Action="MyService/IService/test0", ReplyAction="MyService/IService/test0Response")]
        System.Threading.Tasks.Task test0Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="MyService/IService/test1", ReplyAction="MyService/IService/test1Response")]
        void test1();
        
        [System.ServiceModel.OperationContractAttribute(Action="MyService/IService/test1", ReplyAction="MyService/IService/test1Response")]
        System.Threading.Tasks.Task test1Async();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="MyService/IService/test2", ReplyAction="MyService/IService/test2Response")]
        void test2();
        
        [System.ServiceModel.OperationContractAttribute(Action="MyService/IService/test3", ReplyAction="MyService/IService/test3Response")]
        void test3();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference.IService>, Client.ServiceReference.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void test() {
            base.Channel.test();
        }
        
        public System.Threading.Tasks.Task testAsync() {
            return base.Channel.testAsync();
        }
        
        public void test0() {
            base.Channel.test0();
        }
        
        public System.Threading.Tasks.Task test0Async() {
            return base.Channel.test0Async();
        }
        
        public void test1() {
            base.Channel.test1();
        }
        
        public System.Threading.Tasks.Task test1Async() {
            return base.Channel.test1Async();
        }
    }
}
