//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.CheckinReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="MyService", ConfigurationName="CheckinReference.ICheckinServer", CallbackContract=typeof(Client.CheckinReference.ICheckinServerCallback))]
    public interface ICheckinServer {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/Login")]
        void Login(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/Login")]
        System.Threading.Tasks.Task LoginAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/Logout")]
        void Logout(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/Checkin")]
        void Checkin(string userName, int roomnumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/Checkin")]
        System.Threading.Tasks.Task CheckinAsync(string userName, int roomnumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/Talk")]
        void Talk(string userName, string message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/Talk")]
        System.Threading.Tasks.Task TalkAsync(string userName, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckinServerCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/ShowLogin")]
        void ShowLogin(string loginUserName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/ShowLogout")]
        void ShowLogout(string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/ShowCheckin")]
        void ShowCheckin(string userName, int roomnumber);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="MyService/ICheckinServer/ShowTalk")]
        void ShowTalk(string userName, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckinServerChannel : Client.CheckinReference.ICheckinServer, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckinServerClient : System.ServiceModel.DuplexClientBase<Client.CheckinReference.ICheckinServer>, Client.CheckinReference.ICheckinServer {
        
        public CheckinServerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CheckinServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CheckinServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CheckinServerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CheckinServerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Login(string userName) {
            base.Channel.Login(userName);
        }
        
        public System.Threading.Tasks.Task LoginAsync(string userName) {
            return base.Channel.LoginAsync(userName);
        }
        
        public void Logout(string userName) {
            base.Channel.Logout(userName);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string userName) {
            return base.Channel.LogoutAsync(userName);
        }
        
        public void Checkin(string userName, int roomnumber) {
            base.Channel.Checkin(userName, roomnumber);
        }
        
        public System.Threading.Tasks.Task CheckinAsync(string userName, int roomnumber) {
            return base.Channel.CheckinAsync(userName, roomnumber);
        }
        
        public void Talk(string userName, string message) {
            base.Channel.Talk(userName, message);
        }
        
        public System.Threading.Tasks.Task TalkAsync(string userName, string message) {
            return base.Channel.TalkAsync(userName, message);
        }
    }
}
